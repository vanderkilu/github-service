// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgresql

import (
	"context"
	"time"

	null "gopkg.in/guregu/null.v4"
)

const createCommit = `-- name: CreateCommit :exec
INSERT INTO commit (id, repo_full_name, sha, message, url, author, date) VALUES ($1, $2, $3, $4, $5, $6, $7) ON CONFLICT (sha) DO NOTHING
`

type CreateCommitParams struct {
	ID           int32     `json:"id"`
	RepoFullName string    `json:"repo_full_name"`
	Sha          string    `json:"sha"`
	Message      string    `json:"message"`
	Url          string    `json:"url"`
	Author       string    `json:"author"`
	Date         time.Time `json:"date"`
}

func (q *Queries) CreateCommit(ctx context.Context, arg CreateCommitParams) error {
	_, err := q.db.Exec(ctx, createCommit,
		arg.ID,
		arg.RepoFullName,
		arg.Sha,
		arg.Message,
		arg.Url,
		arg.Author,
		arg.Date,
	)
	return err
}

const createRepository = `-- name: CreateRepository :exec
INSERT INTO repository (id, description, url, language,repo_name, repo_full_name, forks_count, stars_count, open_issues_count, watchers_count,created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) ON CONFLICT (repo_full_name) DO NOTHING
`

type CreateRepositoryParams struct {
	ID              int32     `json:"id"`
	Description     string    `json:"description"`
	Url             string    `json:"url"`
	Language        string    `json:"language"`
	RepoName        string    `json:"repo_name"`
	RepoFullName    string    `json:"repo_full_name"`
	ForksCount      null.Int  `json:"forks_count"`
	StarsCount      null.Int  `json:"stars_count"`
	OpenIssuesCount null.Int  `json:"open_issues_count"`
	WatchersCount   null.Int  `json:"watchers_count"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

func (q *Queries) CreateRepository(ctx context.Context, arg CreateRepositoryParams) error {
	_, err := q.db.Exec(ctx, createRepository,
		arg.ID,
		arg.Description,
		arg.Url,
		arg.Language,
		arg.RepoName,
		arg.RepoFullName,
		arg.ForksCount,
		arg.StarsCount,
		arg.OpenIssuesCount,
		arg.WatchersCount,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getLastCommitSha = `-- name: GetLastCommitSha :one
SELECT sha FROM commit ORDER BY date DESC LIMIT 1
`

func (q *Queries) GetLastCommitSha(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, getLastCommitSha)
	var sha string
	err := row.Scan(&sha)
	return sha, err
}
